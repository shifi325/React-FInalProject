{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getOrders, getOrderByIdA, postOrderA, deleteOrderA } from './OrderApi';\nconst initialState = {\n  arrOrders: [],\n  status: \"idle\",\n  cart: []\n};\nexport const fetchAllOrders = createAsyncThunk('order/fetchAllOrders', async thunkAPI => {\n  const res = await getOrders();\n  return res;\n});\nexport const getOrderById = createAsyncThunk('order/getOrderById', async (id, thunkAPI) => {\n  const res = await getOrderByIdA(id);\n  return res;\n});\nexport const postOrder = createAsyncThunk('order/postOrder', async (newOrder, thunkAPI) => {\n  const res = await postOrderA(newOrder);\n  return res;\n});\nexport const deleteOrder = createAsyncThunk('order/deleteOrder', async (id, thunkAPI) => {\n  const res = await deleteOrderA(id);\n  return res;\n});\nexport const OrderSlice = createSlice({\n  name: 'order',\n  initialState,\n  reducers: {}\n  // extraReducers: (builder) => {\n  //     builder\n  //         .addCase(fetchAllProduct.fulfilled, (state, { payload }) => {\n  //             state.arrProduct = payload\n  //             state.status = \"fullfilled\"\n  //         })\n  //         // You can chain calls, or have separate `builder.addCase()` lines each time\n  //         .addCase(fetchAllProduct.pending, (state, action) => {\n  //             state.status = \"pending\"\n  //         })\n  //         .addCase(fetchAllProduct.rejected, (state, action) => {\n  //             state.status = \"rejected\"\n  //         })\n\n  // },\n});\n\n// export const {  updateProduct } = OrderSlice.actions\n\nexport default OrderSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","createAsyncThunk","getOrders","getOrderByIdA","postOrderA","deleteOrderA","initialState","arrOrders","status","cart","fetchAllOrders","thunkAPI","res","getOrderById","id","postOrder","newOrder","deleteOrder","OrderSlice","name","reducers","reducer"],"sources":["C:/Users/שיפי וינגרטן/Pictures/Saved Pictures/סמינר/כיתה יד/תכנות/react/פרויקט/finalproject/src/features/Order/OrderSlice.js"],"sourcesContent":["import { createSlice, nanoid ,createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { getOrders,getOrderByIdA,postOrderA,deleteOrderA } from './OrderApi'\r\n\r\nconst initialState = {\r\n    arrOrders: [],\r\n    status: \"idle\",\r\n    cart:[],\r\n}\r\n\r\nexport const fetchAllOrders = createAsyncThunk(\r\n    'order/fetchAllOrders',\r\n    async (thunkAPI) => {\r\n        const res = await getOrders()\r\n        return res\r\n    },\r\n)\r\n\r\nexport const getOrderById = createAsyncThunk(\r\n    'order/getOrderById',\r\n    async (id,thunkAPI) => {\r\n        const res = await getOrderByIdA(id)\r\n        return res\r\n    },\r\n)\r\n\r\nexport const postOrder = createAsyncThunk(\r\n    'order/postOrder',\r\n    async (newOrder,thunkAPI) => {\r\n        const res = await postOrderA(newOrder)\r\n        return res\r\n    },\r\n)\r\n\r\nexport const deleteOrder = createAsyncThunk(\r\n    'order/deleteOrder',\r\n    async (id,thunkAPI) => {\r\n        const res = await deleteOrderA(id)\r\n        return res\r\n    },\r\n)\r\n\r\n\r\n\r\nexport const OrderSlice = createSlice({\r\n    name: 'order',\r\n    initialState,\r\n    reducers: {\r\n       \r\n    },\r\n    // extraReducers: (builder) => {\r\n    //     builder\r\n    //         .addCase(fetchAllProduct.fulfilled, (state, { payload }) => {\r\n    //             state.arrProduct = payload\r\n    //             state.status = \"fullfilled\"\r\n    //         })\r\n    //         // You can chain calls, or have separate `builder.addCase()` lines each time\r\n    //         .addCase(fetchAllProduct.pending, (state, action) => {\r\n    //             state.status = \"pending\"\r\n    //         })\r\n    //         .addCase(fetchAllProduct.rejected, (state, action) => {\r\n    //             state.status = \"rejected\"\r\n    //         })\r\n\r\n    // },\r\n})\r\n\r\n\r\n// export const {  updateProduct } = OrderSlice.actions\r\n\r\nexport default OrderSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,EAAEC,gBAAgB,QAAQ,kBAAkB;AACxE,SAASC,SAAS,EAACC,aAAa,EAACC,UAAU,EAACC,YAAY,QAAQ,YAAY;AAE5E,MAAMC,YAAY,GAAG;EACjBC,SAAS,EAAE,EAAE;EACbC,MAAM,EAAE,MAAM;EACdC,IAAI,EAAC;AACT,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGT,gBAAgB,CAC1C,sBAAsB,EACtB,MAAOU,QAAQ,IAAK;EAChB,MAAMC,GAAG,GAAG,MAAMV,SAAS,CAAC,CAAC;EAC7B,OAAOU,GAAG;AACd,CACJ,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGZ,gBAAgB,CACxC,oBAAoB,EACpB,OAAOa,EAAE,EAACH,QAAQ,KAAK;EACnB,MAAMC,GAAG,GAAG,MAAMT,aAAa,CAACW,EAAE,CAAC;EACnC,OAAOF,GAAG;AACd,CACJ,CAAC;AAED,OAAO,MAAMG,SAAS,GAAGd,gBAAgB,CACrC,iBAAiB,EACjB,OAAOe,QAAQ,EAACL,QAAQ,KAAK;EACzB,MAAMC,GAAG,GAAG,MAAMR,UAAU,CAACY,QAAQ,CAAC;EACtC,OAAOJ,GAAG;AACd,CACJ,CAAC;AAED,OAAO,MAAMK,WAAW,GAAGhB,gBAAgB,CACvC,mBAAmB,EACnB,OAAOa,EAAE,EAACH,QAAQ,KAAK;EACnB,MAAMC,GAAG,GAAG,MAAMP,YAAY,CAACS,EAAE,CAAC;EAClC,OAAOF,GAAG;AACd,CACJ,CAAC;AAID,OAAO,MAAMM,UAAU,GAAGnB,WAAW,CAAC;EAClCoB,IAAI,EAAE,OAAO;EACbb,YAAY;EACZc,QAAQ,EAAE,CAEV;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;AACJ,CAAC,CAAC;;AAGF;;AAEA,eAAeF,UAAU,CAACG,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}