{"ast":null,"code":"// import { createSlice, nanoid ,createAsyncThunk } from '@reduxjs/toolkit'\n// import { getUsers,getUserByIdA,postUserA,loginA } from './UserApi'\n\n// const initialState = {\n//     currentUser:null,\n//     arrUsers:[],\n//     status: \"guest\",\n// }\n\n// export const fetchAllUsers = createAsyncThunk(\n//     'user/fetchAllUsers',\n//     async (thunkAPI) => {\n//         const res = await getUsers()\n//         return res\n//     },\n// )\n\n// export const getUserById = createAsyncThunk(\n//     'user/getUserById',\n//     async (id,thunkAPI) => {\n//         const res = await getUserByIdA(id)\n//         return res\n//     },\n// )\n\n// export const postUser = createAsyncThunk(\n//     'user/postUser',\n//     async (newUser,thunkAPI) => {\n//         const res = await postUserA(newUser)\n//         return res\n//     },\n// )\n\n// export const login = createAsyncThunk(\n//     'users/login',\n//     async (user,thunkAPI) => {\n//         const res = loginA(user)\n//         return res\n//     },\n// )\n\n// export const UserSlice = createSlice({\n//     name: 'user',\n//     initialState,\n//     reducers: {\n//         logout: (state, action) => {\n//             state.currentUser = null\n//             state.arrUsers = []\n//             state.status=\"guest\"        },\n//             admin: (state, action) => {\n//             state.arrUsers = []\n\n//                 state.status=\"admin\"        },\n//     },\n\n//     extraReducers: (builder) => {\n//         builder\n//             .addCase(login.fulfilled, (state, { payload }) => {\n//                 state.currentUser=payload\n//                 state.status=\"customer\"\n//                 // // if(state.currentUser.password===\"325770659\"){\n//                 // //     if(state.currentUser.tz===\"325770659\")\n//                 // //          state.type=\"pending\"}\n//                 // //   else\n//                 // //   {\n//                 //     if(state.currentUser!=null)\n//                 //     // let userc=state.arrUser.filter(x=>x.username==state.currentUser.username&&x.password==state.currentUser.password)\n//                 //     // if(userc!=null)\n//                 //       state.type=\"fulfilled\"//user\n//                 //     else\n//                 //       state.type=\"rejected\"\n//                 //   }\n//                 // // state.status=\"fulfilled\"\n//      } )\n//             .addCase(postUser.fulfilled, (state, { payload }) => {\n//                 state.currentUser = payload\n//                 state.status = \"customer\"\n//                 console.log(state.currentUser)\n//             })\n//             // // You can chain calls, or have separate `builder.addCase()` lines each time\n//             // .addCase(fetchAllProduct.pending, (state, action) => {\n//             //     state.status = \"pending\"\n//             // })\n//             // .addCase(fetchAllProduct.rejected, (state, action) => {\n//             //     state.status = \"rejected\"\n//             // })\n\n//     },\n// })\n\n// export const { admin, logout ,setCurrentUser} = UserSlice.actions\n\n// export default UserSlice.reducer\n\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { loginUser, addUser, getUsers } from './usersApi';\nconst initialState = {\n  currentUser: null,\n  arrUsers: [],\n  status: 'guest'\n};\nexport const login = createAsyncThunk('user/login', async (user, thunkAPI) => {\n  const res = await loginUser(user);\n  return res;\n});\nexport const addCurrentUser = createAsyncThunk('user/add', async (user, thunkAPI) => {\n  const res = await addUser(user);\n  return res;\n});\nexport const getAllUsers = createAsyncThunk('user/getAll', async thunkAPI => {\n  const res = await getUsers();\n  return res;\n});\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    logout: (state, action) => {\n      state.currentUser = null;\n      state.arrUsers = [];\n      state.status = \"guest\";\n    },\n    admin: (state, action) => {\n      state.arrUsers = [];\n      state.status = \"admin\";\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(login.fulfilled, (state, {\n      payload\n    }) => {\n      state.currentUser = payload;\n      if (payload.password == '1234') state.status = \"admin\";else state.status = \"customer\";\n    }).addCase(addCurrentUser.fulfilled, (state, {\n      payload\n    }) => {\n      state.currentUser = payload;\n      state.status = \"customer\";\n    }).addCase(getAllUsers.fulfilled, (state, {\n      payload\n    }) => {\n      state.arrUsers = payload;\n    });\n  }\n});\nexport const {\n  logout,\n  admin\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","loginUser","addUser","getUsers","initialState","currentUser","arrUsers","status","login","user","thunkAPI","res","addCurrentUser","getAllUsers","userSlice","name","reducers","logout","state","action","admin","extraReducers","builder","addCase","fulfilled","payload","password","actions","reducer"],"sources":["C:/Users/שיפי וינגרטן/Pictures/Saved Pictures/סמינר/כיתה יד/תכנות/react/פרויקט/finalproject/src/components/features/User/UserSlice.js"],"sourcesContent":["// import { createSlice, nanoid ,createAsyncThunk } from '@reduxjs/toolkit'\r\n// import { getUsers,getUserByIdA,postUserA,loginA } from './UserApi'\r\n\r\n// const initialState = {\r\n//     currentUser:null,\r\n//     arrUsers:[],\r\n//     status: \"guest\",\r\n// }\r\n\r\n// export const fetchAllUsers = createAsyncThunk(\r\n//     'user/fetchAllUsers',\r\n//     async (thunkAPI) => {\r\n//         const res = await getUsers()\r\n//         return res\r\n//     },\r\n// )\r\n\r\n// export const getUserById = createAsyncThunk(\r\n//     'user/getUserById',\r\n//     async (id,thunkAPI) => {\r\n//         const res = await getUserByIdA(id)\r\n//         return res\r\n//     },\r\n// )\r\n\r\n// export const postUser = createAsyncThunk(\r\n//     'user/postUser',\r\n//     async (newUser,thunkAPI) => {\r\n//         const res = await postUserA(newUser)\r\n//         return res\r\n//     },\r\n// )\r\n\r\n// export const login = createAsyncThunk(\r\n//     'users/login',\r\n//     async (user,thunkAPI) => {\r\n//         const res = loginA(user)\r\n//         return res\r\n//     },\r\n// )\r\n\r\n\r\n\r\n// export const UserSlice = createSlice({\r\n//     name: 'user',\r\n//     initialState,\r\n//     reducers: {\r\n//         logout: (state, action) => {\r\n//             state.currentUser = null\r\n//             state.arrUsers = []\r\n//             state.status=\"guest\"        },\r\n//             admin: (state, action) => {\r\n//             state.arrUsers = []\r\n\r\n//                 state.status=\"admin\"        },\r\n//     },\r\n\r\n    \r\n//     extraReducers: (builder) => {\r\n//         builder\r\n//             .addCase(login.fulfilled, (state, { payload }) => {\r\n//                 state.currentUser=payload\r\n//                 state.status=\"customer\"\r\n//                 // // if(state.currentUser.password===\"325770659\"){\r\n//                 // //     if(state.currentUser.tz===\"325770659\")\r\n//                 // //          state.type=\"pending\"}\r\n//                 // //   else\r\n//                 // //   {\r\n//                 //     if(state.currentUser!=null)\r\n//                 //     // let userc=state.arrUser.filter(x=>x.username==state.currentUser.username&&x.password==state.currentUser.password)\r\n//                 //     // if(userc!=null)\r\n//                 //       state.type=\"fulfilled\"//user\r\n//                 //     else\r\n//                 //       state.type=\"rejected\"\r\n//                 //   }\r\n//                 // // state.status=\"fulfilled\"\r\n//      } )\r\n//             .addCase(postUser.fulfilled, (state, { payload }) => {\r\n//                 state.currentUser = payload\r\n//                 state.status = \"customer\"\r\n//                 console.log(state.currentUser)\r\n//             })\r\n//             // // You can chain calls, or have separate `builder.addCase()` lines each time\r\n//             // .addCase(fetchAllProduct.pending, (state, action) => {\r\n//             //     state.status = \"pending\"\r\n//             // })\r\n//             // .addCase(fetchAllProduct.rejected, (state, action) => {\r\n//             //     state.status = \"rejected\"\r\n//             // })\r\n\r\n//     },\r\n// })\r\n\r\n\r\n// export const { admin, logout ,setCurrentUser} = UserSlice.actions\r\n\r\n// export default UserSlice.reducer\r\n\r\n\r\n\r\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport {loginUser,addUser,getUsers} from './usersApi'\r\nconst initialState={\r\n    currentUser:null,\r\n    arrUsers:[],\r\n    status:'guest'\r\n}\r\n\r\nexport const login = createAsyncThunk(\r\n    'user/login',\r\n   async  (user,thunkAPI) => {  \r\n      const res = await loginUser(user)\r\n        return res\r\n    },\r\n)\r\n\r\nexport const addCurrentUser = createAsyncThunk(\r\n    'user/add',\r\n    async (user, thunkAPI) => {\r\n        const res = await addUser(user)\r\n        return res\r\n    }\r\n)\r\n\r\nexport const getAllUsers = createAsyncThunk(\r\n    'user/getAll',\r\n    async (thunkAPI) => {\r\n        const res = await getUsers()\r\n        return res\r\n    }\r\n)\r\n\r\nexport const userSlice = createSlice({\r\n    name: 'user',\r\n    initialState,\r\n    reducers: {\r\n        logout: (state, action) => {\r\n            state.currentUser = null\r\n            state.arrUsers = []\r\n            state.status=\"guest\"\r\n        },\r\n        admin: (state, action) => {\r\n            state.arrUsers = []\r\n            state.status=\"admin\"\r\n        },\r\n    },\r\n\r\n    extraReducers: (builder) => {\r\n        builder\r\n        .addCase(login.fulfilled, (state, { payload }) => {\r\n            state.currentUser = payload\r\n            if(payload.password=='1234')\r\n                state.status = \"admin\"\r\n            else\r\n            state.status = \"customer\"\r\n        })\r\n        .addCase(addCurrentUser.fulfilled, (state, { payload }) => {\r\n            state.currentUser = payload\r\n            state.status = \"customer\"\r\n        })\r\n        .addCase(getAllUsers.fulfilled, (state, { payload }) => {\r\n            state.arrUsers = payload\r\n        })\r\n    },\r\n\r\n})\r\nexport const {logout,admin} = userSlice.actions\r\n\r\nexport default userSlice.reducer"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}