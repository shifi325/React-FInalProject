{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getUsers, getUserByIdA, postUserA, loginA } from './UserApi';\nconst initialState = {\n  currentUser: null,\n  arrUsers: [],\n  status: \"guest\",\n  userInfo: null\n};\nexport const fetchAllUsers = createAsyncThunk('user/fetchAllUsers', async thunkAPI => {\n  const res = await getUsers();\n  return res;\n});\nexport const getUserById = createAsyncThunk('user/getUserById', async (id, thunkAPI) => {\n  const res = await getUserByIdA(id);\n  return res;\n});\nexport const postUser = createAsyncThunk('user/postUser', async (newUser, thunkAPI) => {\n  const res = await postUserA(newUser);\n  return res;\n});\nexport const login = createAsyncThunk('users/login', async (user, thunkAPI) => {\n  const res = loginA(user);\n  return res;\n});\nexport const UserSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    logout: (state, action) => {\n      state.currentUser = null;\n      state.status = \"guest\";\n    },\n    admin: (state, action) => {\n      state.userInfo = action.payload;\n      state.status = \"admin\";\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(login.fulfilled, (state, {\n      payload\n    }) => {\n      state.currentUser = payload;\n      state.status = \"customer\";\n      // // if(state.currentUser.password===\"325770659\"){\n      // //     if(state.currentUser.tz===\"325770659\")\n      // //          state.type=\"pending\"}\n      // //   else\n      // //   {\n      //     if(state.currentUser!=null)\n      //     // let userc=state.arrUser.filter(x=>x.username==state.currentUser.username&&x.password==state.currentUser.password)\n      //     // if(userc!=null)\n      //       state.type=\"fulfilled\"//user\n      //     else\n      //       state.type=\"rejected\"\n      //   }\n      // // state.status=\"fulfilled\"\n    }).addCase(postUser.fulfilled, (state, {\n      payload\n    }) => {\n      state.currentUser = payload;\n      state.status = \"customer\";\n      console.log(state.currentUser);\n      state.userInfo = action.payload;\n    }).addCase(fetchAllUsers.fulfilled, (state, {\n      payload\n    }) => {\n      state.arrUsers = payload;\n    });\n  }\n});\nexport const {\n  admin,\n  logout,\n  setCurrentUser\n} = UserSlice.actions;\nexport default UserSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","createAsyncThunk","getUsers","getUserByIdA","postUserA","loginA","initialState","currentUser","arrUsers","status","userInfo","fetchAllUsers","thunkAPI","res","getUserById","id","postUser","newUser","login","user","UserSlice","name","reducers","logout","state","action","admin","payload","extraReducers","builder","addCase","fulfilled","console","log","setCurrentUser","actions","reducer"],"sources":["C:/Users/שיפי וינגרטן/Pictures/Saved Pictures/סמינר/כיתה יד/תכנות/react/פרויקט/finalproject/src/components/features/User/UserSlice.js"],"sourcesContent":["import { createSlice, nanoid ,createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { getUsers,getUserByIdA,postUserA,loginA } from './UserApi'\r\n\r\nconst initialState = {\r\n    currentUser:null,\r\n    arrUsers:[],\r\n    status: \"guest\",\r\n    userInfo: null,\r\n\r\n}\r\n\r\nexport const fetchAllUsers = createAsyncThunk(\r\n    'user/fetchAllUsers',\r\n    async (thunkAPI) => {\r\n        const res = await getUsers()\r\n        return res\r\n    },\r\n)\r\n\r\nexport const getUserById = createAsyncThunk(\r\n    'user/getUserById',\r\n    async (id,thunkAPI) => {\r\n        const res = await getUserByIdA(id)\r\n        return res\r\n    },\r\n)\r\n\r\nexport const postUser = createAsyncThunk(\r\n    'user/postUser',\r\n    async (newUser,thunkAPI) => {\r\n        const res = await postUserA(newUser)\r\n        return res\r\n    },\r\n)\r\n\r\nexport const login = createAsyncThunk(\r\n    'users/login',\r\n    async (user,thunkAPI) => {\r\n        const res = loginA(user)\r\n        return res\r\n    },\r\n)\r\n\r\n\r\n\r\nexport const UserSlice = createSlice({\r\n    name: 'user',\r\n    initialState,\r\n    reducers: {\r\n        logout: (state, action) => {\r\n            state.currentUser = null\r\n            state.status=\"guest\"        },\r\n            admin: (state, action) => {\r\n                state.userInfo = action.payload;\r\n\r\n                state.status=\"admin\"        },\r\n    },\r\n\r\n    \r\n    extraReducers: (builder) => {\r\n        builder\r\n\r\n            .addCase(login.fulfilled, (state, { payload }) => {\r\n                state.currentUser=payload\r\n                state.status=\"customer\"\r\n                // // if(state.currentUser.password===\"325770659\"){\r\n                // //     if(state.currentUser.tz===\"325770659\")\r\n                // //          state.type=\"pending\"}\r\n                // //   else\r\n                // //   {\r\n                //     if(state.currentUser!=null)\r\n                //     // let userc=state.arrUser.filter(x=>x.username==state.currentUser.username&&x.password==state.currentUser.password)\r\n                //     // if(userc!=null)\r\n                //       state.type=\"fulfilled\"//user\r\n                //     else\r\n                //       state.type=\"rejected\"\r\n                //   }\r\n                // // state.status=\"fulfilled\"\r\n     } )\r\n            .addCase(postUser.fulfilled, (state, { payload }) => {\r\n                state.currentUser = payload\r\n                state.status = \"customer\"\r\n                console.log(state.currentUser)\r\n                state.userInfo = action.payload;\r\n\r\n            })\r\n            .addCase(fetchAllUsers.fulfilled, (state, { payload }) => {\r\n               \r\n                state.arrUsers = payload\r\n            })\r\n    },\r\n})\r\n\r\n\r\nexport const { admin, logout ,setCurrentUser} = UserSlice.actions\r\n\r\nexport default UserSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,EAAEC,gBAAgB,QAAQ,kBAAkB;AACxE,SAASC,QAAQ,EAACC,YAAY,EAACC,SAAS,EAACC,MAAM,QAAQ,WAAW;AAElE,MAAMC,YAAY,GAAG;EACjBC,WAAW,EAAC,IAAI;EAChBC,QAAQ,EAAC,EAAE;EACXC,MAAM,EAAE,OAAO;EACfC,QAAQ,EAAE;AAEd,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGV,gBAAgB,CACzC,oBAAoB,EACpB,MAAOW,QAAQ,IAAK;EAChB,MAAMC,GAAG,GAAG,MAAMX,QAAQ,CAAC,CAAC;EAC5B,OAAOW,GAAG;AACd,CACJ,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGb,gBAAgB,CACvC,kBAAkB,EAClB,OAAOc,EAAE,EAACH,QAAQ,KAAK;EACnB,MAAMC,GAAG,GAAG,MAAMV,YAAY,CAACY,EAAE,CAAC;EAClC,OAAOF,GAAG;AACd,CACJ,CAAC;AAED,OAAO,MAAMG,QAAQ,GAAGf,gBAAgB,CACpC,eAAe,EACf,OAAOgB,OAAO,EAACL,QAAQ,KAAK;EACxB,MAAMC,GAAG,GAAG,MAAMT,SAAS,CAACa,OAAO,CAAC;EACpC,OAAOJ,GAAG;AACd,CACJ,CAAC;AAED,OAAO,MAAMK,KAAK,GAAGjB,gBAAgB,CACjC,aAAa,EACb,OAAOkB,IAAI,EAACP,QAAQ,KAAK;EACrB,MAAMC,GAAG,GAAGR,MAAM,CAACc,IAAI,CAAC;EACxB,OAAON,GAAG;AACd,CACJ,CAAC;AAID,OAAO,MAAMO,SAAS,GAAGrB,WAAW,CAAC;EACjCsB,IAAI,EAAE,MAAM;EACZf,YAAY;EACZgB,QAAQ,EAAE;IACNC,MAAM,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACvBD,KAAK,CAACjB,WAAW,GAAG,IAAI;MACxBiB,KAAK,CAACf,MAAM,GAAC,OAAO;IAAQ,CAAC;IAC7BiB,KAAK,EAAEA,CAACF,KAAK,EAAEC,MAAM,KAAK;MACtBD,KAAK,CAACd,QAAQ,GAAGe,MAAM,CAACE,OAAO;MAE/BH,KAAK,CAACf,MAAM,GAAC,OAAO;IAAQ;EACxC,CAAC;EAGDmB,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CAEFC,OAAO,CAACZ,KAAK,CAACa,SAAS,EAAE,CAACP,KAAK,EAAE;MAAEG;IAAQ,CAAC,KAAK;MAC9CH,KAAK,CAACjB,WAAW,GAACoB,OAAO;MACzBH,KAAK,CAACf,MAAM,GAAC,UAAU;MACvB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACX,CAAE,CAAC,CACKqB,OAAO,CAACd,QAAQ,CAACe,SAAS,EAAE,CAACP,KAAK,EAAE;MAAEG;IAAQ,CAAC,KAAK;MACjDH,KAAK,CAACjB,WAAW,GAAGoB,OAAO;MAC3BH,KAAK,CAACf,MAAM,GAAG,UAAU;MACzBuB,OAAO,CAACC,GAAG,CAACT,KAAK,CAACjB,WAAW,CAAC;MAC9BiB,KAAK,CAACd,QAAQ,GAAGe,MAAM,CAACE,OAAO;IAEnC,CAAC,CAAC,CACDG,OAAO,CAACnB,aAAa,CAACoB,SAAS,EAAE,CAACP,KAAK,EAAE;MAAEG;IAAQ,CAAC,KAAK;MAEtDH,KAAK,CAAChB,QAAQ,GAAGmB,OAAO;IAC5B,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;AAGF,OAAO,MAAM;EAAED,KAAK;EAAEH,MAAM;EAAEW;AAAc,CAAC,GAAGd,SAAS,CAACe,OAAO;AAEjE,eAAef,SAAS,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}