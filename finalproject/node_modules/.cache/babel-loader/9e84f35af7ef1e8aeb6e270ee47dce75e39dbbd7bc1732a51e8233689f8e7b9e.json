{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getProducts, getProductByIdA, postProductA, putProductA, deleteProductA } from './ProductApi';\nconst initialState = {\n  arrProducts: [],\n  status: \"idle\",\n  poststatus: \"idle\"\n};\nexport const fetchAllProducts = createAsyncThunk('product/fetchAllProducts', async thunkAPI => {\n  const res = await getProducts();\n  return res;\n});\nexport const getProductById = createAsyncThunk('product/getProductById', async (id, thunkAPI) => {\n  const res = await getProductByIdA(id);\n  return res;\n});\nexport const postProduct = createAsyncThunk('product/postProduct', async (newProduct, thunkAPI) => {\n  const res = await postProductA(newProduct);\n  return res;\n});\nexport const putProduct = createAsyncThunk('product/putProduct', async ({\n  id,\n  newProduct\n}, thunkAPI) => {\n  const res = await putProductA(id, newProduct);\n  return res;\n});\nexport const deleteProduct = createAsyncThunk('product/deleteProduct', async (id, thunkAPI) => {\n  const res = await deleteProductA(id);\n  return res;\n});\nexport const ProductSlice = createSlice({\n  name: 'product',\n  initialState,\n  reducers: {\n    // setAllProducts: (state, action) => {\n    //     state.arrProduct = action.payload\n    // },\n    // updateProduct: (state, action) => {\n    //     let index = state.arrProduct.findIndex(x => x.id === action.payload.id)\n    //     state.arrProduct.splice(index, 1, action.payload)\n    // },\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAllProducts.fulfilled, (state, {\n      payload\n    }) => {\n      state.arrProducts = payload;\n      state.status = \"fullfilled\";\n    })\n    // You can chain calls, or have separate `builder.addCase()` lines each time\n    .addCase(fetchAllProducts.pending, (state, action) => {\n      state.status = \"pending\";\n    }).addCase(fetchAllProducts.rejected, (state, action) => {\n      state.status = \"rejected\";\n    }).addCase(postProduct.fulfilled, (state, action) => {\n      state.poststatus = \"fullfilled\";\n      console.log(state.poststatus);\n    }).addCase(postProduct.rejected, (state, action) => {\n      state.poststatus = \"rejected\";\n      console.log(state.poststatus);\n    });\n  }\n});\n\n// export const {  updateProduct } = ProductSlice.actions\n\nexport default ProductSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","createAsyncThunk","getProducts","getProductByIdA","postProductA","putProductA","deleteProductA","initialState","arrProducts","status","poststatus","fetchAllProducts","thunkAPI","res","getProductById","id","postProduct","newProduct","putProduct","deleteProduct","ProductSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","payload","pending","action","rejected","console","log","reducer"],"sources":["C:/Users/שיפי וינגרטן/Pictures/Saved Pictures/סמינר/כיתה יד/תכנות/react/פרויקט/finalproject/src/components/features/Product/ProductSlice.js"],"sourcesContent":["import { createSlice, nanoid ,createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { getProducts,getProductByIdA,postProductA,putProductA, deleteProductA } from './ProductApi'\r\n\r\nconst initialState = {\r\n    arrProducts: [],\r\n    status: \"idle\",\r\n    poststatus: \"idle\"\r\n}\r\n\r\nexport const fetchAllProducts = createAsyncThunk(\r\n    'product/fetchAllProducts',\r\n    async (thunkAPI) => {\r\n        const res = await getProducts()\r\n        return res\r\n    },\r\n)\r\n\r\nexport const getProductById = createAsyncThunk(\r\n    'product/getProductById',\r\n    async (id,thunkAPI) => {\r\n        const res = await getProductByIdA(id)\r\n        return res\r\n    },\r\n)\r\n\r\nexport const postProduct = createAsyncThunk(\r\n    'product/postProduct',\r\n    async (newProduct,thunkAPI) => {\r\n        const res = await postProductA(newProduct)\r\n        return res\r\n    },\r\n)\r\n\r\nexport const putProduct = createAsyncThunk(\r\n    'product/putProduct',\r\n    async ({id,newProduct},thunkAPI) => {\r\n        const res = await putProductA(id,newProduct)\r\n        return res\r\n    },\r\n)\r\n\r\nexport const deleteProduct = createAsyncThunk(\r\n    'product/deleteProduct',\r\n    async (id,thunkAPI) => {\r\n        const res = await deleteProductA(id)\r\n        return res\r\n    },\r\n)\r\n\r\n\r\nexport const ProductSlice = createSlice({\r\n    name: 'product',\r\n    initialState,\r\n    reducers: {\r\n        // setAllProducts: (state, action) => {\r\n        //     state.arrProduct = action.payload\r\n        // },\r\n        // updateProduct: (state, action) => {\r\n        //     let index = state.arrProduct.findIndex(x => x.id === action.payload.id)\r\n        //     state.arrProduct.splice(index, 1, action.payload)\r\n        // },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(fetchAllProducts.fulfilled, (state, { payload }) => {\r\n                state.arrProducts = payload\r\n                state.status = \"fullfilled\"\r\n            })\r\n            // You can chain calls, or have separate `builder.addCase()` lines each time\r\n            .addCase(fetchAllProducts.pending, (state, action) => {\r\n                state.status = \"pending\"\r\n            })\r\n            .addCase(fetchAllProducts.rejected, (state, action) => {\r\n                state.status = \"rejected\"\r\n            })\r\n            .addCase(postProduct.fulfilled, (state, action) => {\r\n                state.poststatus = \"fullfilled\"\r\n                console.log(state.poststatus)\r\n            })\r\n            .addCase(postProduct.rejected, (state, action) => {\r\n                state.poststatus = \"rejected\"\r\n                console.log(state.poststatus)\r\n            })\r\n\r\n    },\r\n})\r\n\r\n\r\n// export const {  updateProduct } = ProductSlice.actions\r\n\r\nexport default ProductSlice.reducer"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}